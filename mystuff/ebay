import json
from logging import StringTemplateStyle
import numbers
from os import link, name
import pandas as pd






class Pokebay:
    def __init__(self):
        with open(r'sets\en.json', encoding = 'UTF-8') as file:
            self.sets = json.load(file)
       



    def fileOpener(self, setID):
        '''Opens up the card set's json file

        Args:
            setID(string): the set code that is also used as file name ex.) bw03
        '''
        with open(f'cards\\en\\{setID}.json', encoding = 'UTF-8') as file:
            return json.load(file)


    def getSet(self, cardNum, printedNum):
        '''Takes input of card information, finds the right card, and creates a string to copy/paste into ebay
        Args:
            cardNum(int): The number of the card in the set
            printedNum(int): The total number of cards in the set as printed on the card
        Attributes:
            nameList(list): List of selected card names for printing in console
            linkList(list): List of URLs to pictures of the cards for identifying
            idList(list): List of the card IDs
            itr(int): iterator
            cardSet(json): The entire set of cards
            finalID(string): The ID of the selected card
            finalFile(json): The file of the selected card
            finalCard(json): The info of the selected card
            finalSet(json): Set info for the final card
            con(string): The input of the card's condition
            condition(string): The final string of the condition for copy/paste
            extra(int): The input of whether the card is holographic
            foil(string): The final string of the holo for copy/paste
            title(string): The compiled title string with all info to copy and paste
            description(string): A string to copy/paste into the description
        ''' 
        nameList = [] 
        linkList = [] 
        idList = [] 
        itr = 0

        #This finds the correct cards and populates the lists above
        for eachSet in self.sets: 
            if eachSet['printedTotal'] == printedNum: #Uses the set total to find the right set, then calls file opener with the set id
                cardSet = self.fileOpener(eachSet['id'])
                for card in cardSet: #finds the card in it's set and appends the information to lists
                    if card['number'] == str(cardNum):
                        nameList.append(card['name'])
                        linkList.append(f"{itr}: {card['images']['small']}") #some images are called 'logo' instead of 'small'
                        idList.append(card['id'])
                        itr+=1

        #This prints the lists if more than one card matches the given info
        if len(nameList) > 1:
            selected = input(f"\nNames: {nameList}\nLinks: {linkList}\nEnter card's index\n")
            finalID = idList[int(selected)]
        else:
            finalID = idList[0]

        finalFile = self.fileOpener(finalID.split('-')[0]) 

        #Sets a var for the selected card and its set.
        for each in finalFile:
            if each['id'] == finalID:
                finalCard = each
        
        for each in self.sets:
            if each['id'] == finalID.split('-')[0]:
                finalSet = each


        #Asks for the card condition to print in the console
        con = input('Condition? nm, lp, mp hp, or d  ').lower()
        if con == 'nm':
            condition = 'Near Mint'
        elif con == 'lp':
            condition = 'Lightly Played'
        elif con == 'mp':
            condition = 'Moderately Played'
        elif con == 'hp':
            condition = 'Heavily Played'
        elif con == 'd':
            condition = 'Damaged'

        #Asks whether it's holographic
        extra = int(input("\n0: none, 1: Reverse Holo, 2: Holo"))
        foil = ''
        if extra == 1:
            foil = 'Reverse Holo'
        elif extra == 2:
            foil = 'Holo' 
        print('\n')

        #Here is compiles the final copy/paste strings, the string must be <= 80 chars
        if foil != '':
            title = f"{finalCard['name']} - {finalSet['series']}: {finalSet['name']} ({finalCard['number']}/{finalSet['printedTotal']}) - {foil} {condition} Pokemon Card" 

            if len(title) > 80:
                title = f"{finalCard['name']} - {finalSet['series']}: {finalSet['name']} ({finalCard['number']}/{finalSet['printedTotal']}) - {foil} {con.upper()} - Pokemon Card"
                if len(title) > 80:
                    title = f"{finalCard['name']} - {finalSet['series']}: {finalSet['name']} ({finalCard['number']}/{finalSet['printedTotal']}) - {con.upper()} - Pokemon Card\nStill too long"
        else:
            title = f"{finalCard['name']} - {finalSet['series']}: {finalSet['name']} ({finalCard['number']}/{finalSet['printedTotal']}) - {con.upper()} - Pokemon Card"
            if len(title) > 80:
                title = f"{finalCard['name']} - {finalSet['series']}: {finalSet['name']} ({finalCard['number']}/{finalSet['printedTotal']}) - {con.upper()} - Pokemon Card\nStill too long"
        
        description = f"\nShipping: This card will be safely shipped in an envelope with plenty of bend/damage protection. I can also ship it in a bubble mailer if you are willing to pay the additional shipping.\n\nCondition: This card is in {condition} condition. The card pictured is the card you will be receiving."

        print(title)
        print(description)

        



    # to do:
    #     add holo to strings
    #     record what is listed for quantity, record keeping, and profit/loss
    # have it automatically bring up ebay link
    # turn condition into numbers



p = Pokebay()
# print("\nhere: ", p.getSet(int(input("\nCard number? ")), int(input("Full set: "))))
p.getSet(int(input("\nCard number? ")), int(input("Full set: ")))